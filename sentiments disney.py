# -*- coding: utf-8 -*-
"""Sentiments_Disney.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-mo2AtFoYeYCQ0VUVRXBoHVJNe7wylBf
"""

import numpy as np # linear algebra
import pandas as pd # data processing
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import drive
drive.mount('/content/gdrive')

import tensorflow as tfm
if tfm.test.gpu_device_name():
  print (f'Se encontró el siguientr GPU: {tfm.test.gpu_device_name()}')
else:
  print('Aqui no hay GPU´s')

encodings = ['utf-8', 'ISO-8859-1', 'latin1']

for encoding in encodings:
    try:
        df = pd.read_csv('/content/gdrive/MyDrive/Colab Notebooks/NLP/DisneylandReviews.csv', encoding=encoding)
        print("File read successfully with encoding:", encoding)
        break
    except UnicodeDecodeError:
        print("Error reading the file with encoding:", encoding)
df.head()

df.isnull().sum()

df.duplicated().sum()

df.drop_duplicates(keep='first', inplace=True)

df['Reviewer_Location'].value_counts()

df['Reviewer_Location'].unique()

df['Rating'].value_counts()

import re
import nltk
import numpy as np
from nltk import word_tokenize
from nltk.corpus import stopwords
from nltk.stem.wordnet import WordNetLemmatizer
nltk.download('stopwords')
nltk.download('punkt')
nltk.download('wordnet')
stop_words_en = stopwords.words('english')
lemmatizer = WordNetLemmatizer()

def preprocesamiento_texto(texto):

    # haces todo el texto en minúsculas
    texto=texto.lower()

    # regex para caracteres especiales y números
    texto = re.sub(r'[^a-zA-Z\s]', '', texto)

    # tokenizar el texto
    texto_tokenized= word_tokenize(texto)

    # eliminar stopwords
    texto_no_stop = [token for token in texto_tokenized if token not in stop_words_en]

    # lematizar/unir las palabras procesadas nuevamente en una cadena
    final= [lemmatizer.lemmatize (word) for word in texto_no_stop]
    final=' '.join(final)

    return final

df['texto_limpio'] = df['Review_Text'].apply(preprocesamiento_texto)
df.head()

df.drop(df[df['Year_Month'] == 'missing'].index, inplace=True)

def sentiment(score):
    if score > 3:
        return 'Positive'
    elif score == 3:
        return 'Neutral'
    else:
        return 'Negative'

df['Sentiment'] = df['Rating'].apply(sentiment)
df.head()

sns.countplot(x=df['Rating'])
plt.show()

sns.countplot(x=df['Sentiment'])
plt.show()

pos = df[df['Sentiment'] == 'Positive'].sample(4500)
neg = df[df['Sentiment'] == 'Negative'].sample(3000)
neu = df[df['Sentiment'] == 'Neutral'].sample(3800)

df = pd.concat([pos,neg,neu],axis=0)
df.shape

df['Branch'].value_counts()

new = df["Year_Month"].str.split("-", n = 1, expand = True)

df["Year"]= new[0]
df["Month"]= new[1]

df.head()

df['Year'] = df['Year'].astype(int)

"""REVIEWS PER YEAR"""

plt.figure(figsize=(10,6))
sns.countplot(data=df,x='Year',hue='Branch',palette='Purples');

"""REVIEWS PER COUNTRY"""

import plotly.express as px
fig_df=df.groupby('Reviewer_Location',as_index=False).agg({'Branch':'count'}).sort_values('Branch',ascending=False)
fig = px.choropleth(fig_df,
                    locations='Reviewer_Location', locationmode='country names',
                    color='Branch',
                    color_continuous_scale="portland", hover_data=['Branch'],
                    title='Country - Reviews')
fig.update(layout_coloraxis_showscale=False)
fig.show();

df4 = df.groupby(['Reviewer_Location'],as_index=False).agg({'Rating':'mean'}).sort_values(by='Rating', ascending=True).head(10)
df4.style.background_gradient(cmap="autumn", subset=['Rating'])

"""SENTIMENTS PER PARK"""

plt.figure(figsize=(10,6))
sns.countplot(data=df,x='Branch',hue='Sentiment',palette='Greens');

"""SENTIMENT PERCENTAGE PER PARK"""

sentiment_colors = {'Positive': 'lightgreen', 'Neutral': 'lightblue', 'Negative': 'red'}

branches = ['Disneyland_California', 'Disneyland_Paris', 'Disneyland_HongKong']

fig, axes = plt.subplots(1, 3, figsize=(20, 7), sharey=False)
fig.suptitle('Branches')

for i, branch in enumerate(branches):
    df_branch = df[df['Branch'] == branch]
    labels = df_branch['Sentiment'].value_counts(sort=True).index
    sizes = df_branch['Sentiment'].value_counts(sort=True)

    colors = [sentiment_colors[sentiment] for sentiment in labels]

    axes[i].pie(sizes, labels=labels, startangle=90, shadow=1, autopct='%1.2f%%', colors=colors)
    axes[i].set_title(branch)

plt.show()

